<#@ output extension=".cs" #>
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="NetStandard" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="$(CommonFolder)\Postman.Common.dll" #>
<#@ assembly name="$(JsonFolder)\Newtonsoft.Json.dll" #>
<#@ assembly name="$(Microsoft_VisualStudio_Interop)" #>
<#@ import namespace="Postman.Common" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
using System.Reflection;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Postman.Wrapper
{
<#
string[] files = new Setup().GetCollectionFilePaths();                                   
foreach (string jsonFile in files)
{
CollectionFile cf = new CollectionFile(jsonFile);
#>
    [TestClass]
    public class <#= cf.Name #>
    {
        public TestContext TestContext { get; set; }

<#
foreach (Folder folder in cf.Folders)
{
PostmanFolderDecoration pfd = new PostmanFolderDecoration(folder);
if (pfd.InUse)
{
foreach (DataTestCase tc in pfd.DataTestCaseList)
{
#>
        [TestMethod]
        [Timeout(1000*60)]
		[TestProperty("AdoId", "<#=tc.Id#>")]
<#
if (tc.Dataline != string.Empty)
{
#>
        public void <#= folder.Name #>_<#= tc.Id#>() { new PostmanWrapper(this.GetType().Name, "<#= folder.Name#>", "<#=tc.Dataline#>").Run(TestContext); }

<#
}
else
{
#>
        public void <#= folder.Name #>_<#= tc.Id#>() { new PostmanWrapper(this.GetType().Name, "<#= folder.Name#>").Run(TestContext); }

<#
}
}
}
else
{
#>
        [TestMethod]
        [Timeout(1000*60)]
        public void <#= folder.Name #>() { new PostmanWrapper(this.GetType().Name, "<#= folder.Name#>").Run(TestContext); }

<#
}
}
#>
    }

<#
}
#>
}